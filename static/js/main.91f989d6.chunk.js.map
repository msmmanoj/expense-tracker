{"version":3,"sources":["components/expenseTracker.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ExpenseTracker","useState","balance","setBalance","value","type","dateTime","transactions","addTransactions","expenseRef","useRef","className","min","ref","onClick","current","Date","toISOString","alert","map","result","key","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRA2EeA,EAjEQ,WACnB,MAA8BC,mBAAiB,GAA/C,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwCF,mBAAwB,CAAC,CAC7DG,MAAO,EACPC,KAAM,GACNC,SAAU,MAHd,mBAAOC,EAAP,KAAqBC,EAArB,KAKMC,EAAaC,iBAAY,GAmC/B,OACI,sBAAKC,UAAU,YAAf,UACI,uDACA,sBAAKA,UAAU,UAAf,UACI,2CAAcT,KACd,uBAAOG,KAAK,SAASO,IAAI,IAAIC,IAAKJ,IAClC,uBACA,wBAAQE,UAAU,qBAAqBG,QAxChC,YACVL,EAAWM,QAAQX,MAAQ,GAC5BD,EAAWD,IAAWO,EAAWM,QAAQX,OACzCI,EAAgB,GAAD,mBAAKD,GAAL,CAAmB,CAC9BH,OAAQK,EAAWM,QAAQX,MAC3BC,KAAM,MACNC,UAAU,IAAIU,MAAOC,mBAGzBC,MAAM,+CAEVT,EAAWM,QAAQX,MAAQ,IA6BnB,iBACA,wBAAQO,UAAU,qBAAqBG,QA3B7B,WAClB,IAAKL,EAAWM,QAAQX,MAAQ,EAAG,CAC/B,IAAIA,EAAQF,EAAUO,EAAWM,QAAQX,MACzC,GAAIA,EAAQ,EAER,YADAc,MAAM,wCAGVf,EAAWC,GACXI,EAAgB,GAAD,mBAAKD,GAAL,CAAmB,CAC9BH,OAAQK,EAAWM,QAAQX,MAC3BC,KAAM,SACNC,UAAU,IAAIU,MAAOC,uBAGzBC,MAAM,+CAEVT,EAAWM,QAAQX,MAAQ,IAWnB,uBAEJ,sBAAKO,UAAU,eAAf,UACI,+CACA,6BACKJ,EAAaY,KAAI,SAACC,EAAQC,GACvB,OAAOD,EAAOhB,MACV,+BAAegB,EAAOd,SAAtB,MAAmCc,EAAOhB,MAA1C,MAAoDgB,EAAOf,OAAlDgB,GAA+D,iBCvDrFC,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCOSY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.91f989d6.chunk.js","sourcesContent":["import React, {useState, useRef} from \"react\";\nimport './expenseTracker.css';\n\ninterface Transaction {\n    value?: number;\n    type?: string;\n    dateTime?: string;\n}\n\n\nconst ExpenseTracker = () => {\n    const [balance, setBalance] = useState<number>(0);\n    const [transactions, addTransactions] = useState<Transaction[]>([{\n        value: 0,\n        type: '',\n        dateTime: '',\n    }]);\n    const expenseRef = useRef<any>(0);\n\n    const addExpense = () => {\n        if (+expenseRef.current.value > 0) {\n            setBalance(balance + +expenseRef.current.value)\n            addTransactions([...transactions, {\n                value: +expenseRef.current.value,\n                type: \"Add\",\n                dateTime: new Date().toISOString()\n            }]);\n        } else {\n            alert(\"Please enter a valid number other than zero\")\n        }\n        expenseRef.current.value = '';\n    }\n\n    const removeExpense = () => {\n        if (+expenseRef.current.value > 0) {\n            let value = balance - expenseRef.current.value\n            if (value < 0) {\n                alert(\"Unable to make transaction Low fund!\")\n                return;\n            }\n            setBalance(value)\n            addTransactions([...transactions, {\n                value: +expenseRef.current.value,\n                type: 'Remove',\n                dateTime: new Date().toISOString()\n            }]);\n        } else {\n            alert(\"Please enter a valid number other than zero\")\n        }\n        expenseRef.current.value = '';\n    }\n\n    return (\n        <div className=\"container\">\n            <h1>Expense Tracker Basic</h1>\n            <div className=\"expense\">\n                <p>Balance : {balance}</p>\n                <input type=\"number\" min='0' ref={expenseRef} />\n                <br/>\n                <button className=\"expense-operations\" onClick={addExpense}>Add</button>\n                <button className=\"expense-operations\" onClick={removeExpense}>Remove</button>\n            </div>\n            <div className=\"transactions\">\n                <p>Transactions :</p>\n                <ul>\n                    {transactions.map((result, key) => {\n                        return result.value ?\n                            <li key={key}>{result.dateTime} - {result.value} - {result.type}</li> : null\n                    })}\n                </ul>\n            </div>\n        </div>\n    )\n}\n\nexport default ExpenseTracker;","import React from 'react';\nimport './App.css';\nimport ExpenseTracker from \"./components/expenseTracker\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExpenseTracker />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}